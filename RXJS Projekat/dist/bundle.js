/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t){return"function"==typeof t}var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}};function o(t){setTimeout((function(){throw t}),0)}var s={closed:!0,next:function(t){},error:function(t){if(i.useDeprecatedSynchronousErrorHandling)throw t;o(t)},complete:function(){}},c=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function u(t){return null!==t&&"object"==typeof t}var a=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),l=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r=this,i=r._parentOrParents,o=r._ctorUnsubscribe,s=r._unsubscribe,l=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof t)i.remove(this);else if(null!==i)for(var d=0;d<i.length;++d)i[d].remove(this);if(n(s)){o&&(this._unsubscribe=void 0);try{s.call(this)}catch(t){e=t instanceof a?h(t.errors):[t]}}if(c(l)){d=-1;for(var p=l.length;++d<p;){var f=l[d];if(u(f))try{f.unsubscribe()}catch(t){e=e||[],t instanceof a?e=e.concat(h(t.errors)):e.push(t)}}}if(e)throw new a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function h(t){return t.reduce((function(t,e){return t.concat(e instanceof a?e.errors:e)}),[])}var d=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),p=function(t){function n(e,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=s;break;case 1:if(!e){o.destination=s;break}if("object"==typeof e){e instanceof n?(o.syncErrorThrowable=e.syncErrorThrowable,o.destination=e,e.add(o)):(o.syncErrorThrowable=!0,o.destination=new f(o,e));break}default:o.syncErrorThrowable=!0,o.destination=new f(o,e,r,i)}return o}return e(n,t),n.prototype[d]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(l),f=function(t){function r(e,r,i,o){var c,u=t.call(this)||this;u._parentSubscriber=e;var a=u;return n(r)?c=r:r&&(c=r.next,i=r.error,o=r.complete,r!==s&&(n((a=Object.create(r)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=c,u._error=i,u._complete=o,u}return e(r,t),r.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},r.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=i.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):o(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;o(t)}}},r.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},r.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw t;o(t)}},r.prototype.__tryOrSetError=function(t,e,n){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return i.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(o(e),!0)}return!1},r.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},r}(p),b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function y(t){return t}function m(t){return 0===t.length?y:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var v=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof p)return t;if(t[d])return t[d]()}return t||e||n?new p(t,e,n):new p(s)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||i.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),i.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){i.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof p?r:null}return!0}(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=g(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[b]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:m(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=g(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function g(t){if(t||(t=i.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function _(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new w(t,e))}}var w=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new E(t,this.project,this.thisArg))},t}(),E=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},n}(p);function x(t,e,r,i){return n(r)&&(i=r,r=void 0),i?x(t,e,r).pipe(_((function(t){return c(t)?i.apply(void 0,t):i(t)}))):new v((function(n){S(t,e,(function(t){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(t)}),n,r)}))}function S(t,e,n,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,n,i),o=function(){return s.removeEventListener(e,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var c=t;t.on(e,n),o=function(){return c.off(e,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var u=t;t.addListener(e,n),o=function(){return u.removeListener(e,n)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,l=t.length;a<l;a++)S(t[a],e,n,r,i)}r.add(o)}var T=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},n}(function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(l)),C=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),L=new(function(t){function n(e,r){void 0===r&&(r=C.now);var i=t.call(this,e,(function(){return n.delegate&&n.delegate!==i?n.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return e(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(C))(T);function D(t,e){return void 0===e&&(e=L),function(n){return n.lift(new k(t,e))}}var k=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new j(t,this.dueTime,this.scheduler))},t}(),j=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return e(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(N,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(p);function N(t){t.debouncedNext()}function A(t,e){return function(n){return n.lift(new H(t,e))}}var H=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new O(t,this.predicate,this.thisArg))},t}(),O=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},n}(p);function I(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var P=I(),B=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function M(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var V=function(t){if(t&&"function"==typeof t[b])return i=t,function(t){var e=i[b]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(B(t))return r=t,function(t){for(var e=0,n=r.length;e<n&&!t.closed;e++)t.next(r[e]);t.complete()};if(M(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,o),t};if(t&&"function"==typeof t[P])return e=t,function(t){for(var n=e[P]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i,s=u(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+s+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function U(t,e){return e?function(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[b]}(t))return function(t,e){return new v((function(n){var r=new l;return r.add(e.schedule((function(){var i=t[b]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(M(t))return function(t,e){return new v((function(n){var r=new l;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(B(t))return function(t,e){return new v((function(n){var r=new l,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}(t,e);if(function(t){return t&&"function"==typeof t[P]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new v((function(n){var r,i=new l;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[P](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}(t,e):t instanceof v?t:new v(V(t))}var z=function(t){function n(e){var n=t.call(this)||this;return n.parent=e,n}return e(n,t),n.prototype._next=function(t){this.parent.notifyNext(t)},n.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},n}(p),F=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(){this.destination.complete()},n}(p);function Y(t,e){return"function"==typeof e?function(n){return n.pipe(Y((function(n,r){return U(t(n,r)).pipe(_((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new $(t))}}var $=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new q(t,this.project))},t}(),q=function(t){function n(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return e(n,t),n.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e)},n.prototype._innerSub=function(t){var e=this.innerSubscription;e&&e.unsubscribe();var n=new z(this),r=this.destination;r.add(n),this.innerSubscription=function(t,e){if(!e.closed)return t instanceof v?t.subscribe(e):V(t)(e)}(t,n),this.innerSubscription!==n&&r.add(this.innerSubscription)},n.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=void 0},n.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t){this.destination.next(t)},n}(F);const W="http://localhost:3000";var X=0;class K{constructor(t,e){this._imageList=[],this.user=t,this.container=e,this._imageList=new Array}set user(t){this._user=t}get user(){return this._user}set container(t){this._container=t}get container(){return this._container}set imageList(t){this._imageList=t}get imageList(){return this._imageList}draw(){this.createCarNameBox()}createComboBox(t){var e,n=document.createElement("select");n.className="selekcija",t.appendChild(n),U(fetch(`${W}/cars`).then((t=>{if(t.ok)return console.log(t),t.json();throw new Error("DB not found")})).catch((t=>console.log("Error"+t)))).subscribe((t=>{console.log(t),t.forEach((t=>{(e=document.createElement("option")).innerHTML=t,e.classList.add("opcija"),e.value=t,n.appendChild(e)}))})),x(n,"click").pipe(_((t=>t.target.value)),Y((t=>this.getDriversByCar(t)))).subscribe((e=>{console.log(e),this.WriteDrivers(e),this.createImage(t)}))}createCarNameBox(){const t=document.createElement("div");t.className="TaxiLogic",this.container.appendChild(t);const e=document.createElement("label");e.innerHTML="Izaberite marku automobila koji zelite:",e.style.margin="10px",t.appendChild(e),this.createComboBox(t)}createImage(t){var e=this.container.getElementsByClassName("image")[0];void 0!==e&&e.remove();const n=document.createElement("img");X%=4,n.src="../"+this.imageList[X],console.log(this.imageList),console.log(X),console.log("../"+n.src),console.log("../pictures/AudiA4/front.jpg"),n.className="image",t.appendChild(n),x(n,"click").pipe().subscribe((()=>{n.src="../"+this.imageList[++X%4]}))}getDriversByCar(t){return this.imageList=new Array,console.log(`fetching Car photos of ${t}`),fetch(`${W}/photos/`+t).then((t=>{if(!t.ok)throw new Error("DB not found");t.json().then((t=>t.forEach((t=>{this.imageList.push(t)}))))})).catch((t=>console.log("Error"+t))),console.log(this.imageList),U(fetch(`${W}/drivers/`+t).then((t=>{if(t.ok)return t.json();throw new Error("DB not found")})).catch((t=>console.log("Error"+t))))}WriteDrivers(t){var e=this.container.getElementsByClassName("tabela")[0];void 0!==e&&e.remove();const n=document.createElement("table");n.className="tabela",n.style.border="1px solid black",this.container.appendChild(n),this.createTable(n),t.forEach((t=>{this.createTr(t,n)}))}createTr(t,e){const n=document.createElement("tr");e.appendChild(n),this.createTd(t.name,n),this.createTd(t.car.toString(),n),this.createTd(t.avgMark.toString(),n),this.createTd(t.priceCoefficient.toString(),n),this.createTdButton("Selektuj ovog vozaca",n)}createTdButton(t,e){let n=document.createElement("td"),r=document.createElement("button");n.appendChild(r),r.innerHTML=t,n.style.margin="50%",r.className="dugmeUTabeli",e.appendChild(n)}createTable(t){this.createTh("Ime",t),this.createTh("Vozilo",t),this.createTh("Prosecna ocena",t),this.createTh("Koeficijent po minutu",t),this.createTh("Dugme za selekciju",t)}createTh(t,e){let n=document.createElement("th");n.innerHTML=t,n.style.margin="50%",e.appendChild(n)}createTd(t,e){let n=document.createElement("td");n.innerHTML=t,n.style.margin="50%",e.appendChild(n)}createH2(t,e){const n=document.createElement("h2");n.innerHTML=t,e.appendChild(n)}}const R=new class{constructor(t,e,n){this.name=t,this.address=e,this.idcard=n}set name(t){this._name=t}get name(){return this._name}set address(t){this._address=t}get address(){return this._address}set idcard(t){this._iDCard=t}get idcard(){return this._iDCard}checkInputs(){return console.log(this),void 0!==this.name&&void 0!==this.address&&0!==this.idcard}}(void 0,void 0,0);function G(t,e){const n=document.createElement("h3");void 0===t||0===parseInt(t)?n.innerHTML="Niste uneli ovaj podatak":n.innerHTML=t,e.appendChild(n)}function J(t,e){const n=document.createElement("h4");void 0===t||0===parseInt(t)?n.innerHTML="Niste uneli ovaj podatak":n.innerHTML=t,e.appendChild(n)}function Q(t){var e=document.body.getElementsByClassName("DataViewDiv")[0];null!=e&&e.remove();const n=document.createElement("div");n.className="DataViewDiv",t.appendChild(n),G("Vase ime:",n),J(R.name,n),G("Adresa na kojoj taksi dolazi po vas:",n),J(R.address,n),G("Broj licne karte:",n),J(R.idcard.toString(),n)}function Z(){if(void 0!==document.getElementsByClassName("TaxiLogicDiv")[0])return;const t=document.createElement("div");t.className="TaxiLogicDiv",document.body.appendChild(t),new K(R,t).draw()}new K(void 0,void 0),function(){const t=document.createElement("div");t.className="DivHeader",document.body.appendChild(t),function(t,e){const n=document.createElement("h1");n.innerHTML="FICAX TAXI ONLINE",e.appendChild(n)}(0,t)}(),function(){const t=document.createElement("div");t.className="UserFormDiv",document.body.appendChild(t),function(t){const e=document.createElement("div");e.className="inputDiv",t.appendChild(e),function(t,e){const n=document.createElement("h2");n.innerHTML=t,e.appendChild(n)}("Unesite vase podatke:",e),function(t){const e=document.createElement("label");e.innerHTML="Unesite vase ime:",e.style.margin="10px",t.appendChild(e);const n=document.createElement("input");n.type="text",n.className="inputName",n.id="input",t.appendChild(n),x(n,"input").pipe(D(500),_((t=>t.target.value)),A((t=>t.length>=3))).subscribe((t=>{console.log(t),R.name=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&Q(e),R.checkInputs()&&Z()}))}(e),function(t){const e=document.createElement("label");e.innerHTML="Unesite adresu na koju dolazi taksi:",e.style.margin="10px",t.appendChild(e);const n=document.createElement("input");n.className="inputSurname",n.type="text",n.id="input",t.appendChild(n),x(n,"input").pipe(D(500),_((t=>t.target.value)),A((t=>t.length>=3))).subscribe((t=>{console.log(t),R.address=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&Q(e),R.checkInputs()&&Z()}))}(e),function(t){const e=document.createElement("label");e.innerHTML="Unesite broj licne karte:",e.style.margin="10px",t.appendChild(e);const n=document.createElement("input");n.type="number",n.className="inputID",n.id="input",t.appendChild(n),x(n,"input").pipe(D(500),_((t=>t.target.value)),A((t=>9==t.length)),_((t=>parseInt(t)))).subscribe((t=>{console.log(t),R.idcard=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&Q(e),R.checkInputs()&&Z()}))}(e)}(t),Q(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,