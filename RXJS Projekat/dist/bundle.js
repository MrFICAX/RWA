/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t){return"function"==typeof t}var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}};function o(t){setTimeout((function(){throw t}),0)}var s={closed:!0,next:function(t){},error:function(t){if(i.useDeprecatedSynchronousErrorHandling)throw t;o(t)},complete:function(){}},c=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function u(t){return null!==t&&"object"==typeof t}var a=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),l=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r=this,i=r._parentOrParents,o=r._ctorUnsubscribe,s=r._unsubscribe,l=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof t)i.remove(this);else if(null!==i)for(var d=0;d<i.length;++d)i[d].remove(this);if(n(s)){o&&(this._unsubscribe=void 0);try{s.call(this)}catch(t){e=t instanceof a?h(t.errors):[t]}}if(c(l)){d=-1;for(var p=l.length;++d<p;){var f=l[d];if(u(f))try{f.unsubscribe()}catch(t){e=e||[],t instanceof a?e=e.concat(h(t.errors)):e.push(t)}}}if(e)throw new a(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function h(t){return t.reduce((function(t,e){return t.concat(e instanceof a?e.errors:e)}),[])}var d=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),p=function(t){function n(e,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=s;break;case 1:if(!e){o.destination=s;break}if("object"==typeof e){e instanceof n?(o.syncErrorThrowable=e.syncErrorThrowable,o.destination=e,e.add(o)):(o.syncErrorThrowable=!0,o.destination=new f(o,e));break}default:o.syncErrorThrowable=!0,o.destination=new f(o,e,r,i)}return o}return e(n,t),n.prototype[d]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(l),f=function(t){function r(e,r,i,o){var c,u=t.call(this)||this;u._parentSubscriber=e;var a=u;return n(r)?c=r:r&&(c=r.next,i=r.error,o=r.complete,r!==s&&(n((a=Object.create(r)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=c,u._error=i,u._complete=o,u}return e(r,t),r.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},r.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=i.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):o(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;o(t)}}},r.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};i.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},r.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw t;o(t)}},r.prototype.__tryOrSetError=function(t,e,n){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return i.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(o(e),!0)}return!1},r.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},r}(p),b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function y(t){return t}function v(t){return 0===t.length?y:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var m=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof p)return t;if(t[d])return t[d]()}return t||e||n?new p(t,e,n):new p(s)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||i.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),i.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){i.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof p?r:null}return!0}(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=g(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[b]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:v(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=g(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function g(t){if(t||(t=i.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function w(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new _(t,e))}}var _=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new E(t,this.project,this.thisArg))},t}(),E=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},n}(p);function S(t,e,r,i){return n(r)&&(i=r,r=void 0),i?S(t,e,r).pipe(w((function(t){return c(t)?i.apply(void 0,t):i(t)}))):new m((function(n){x(t,e,(function(t){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(t)}),n,r)}))}function x(t,e,n,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,n,i),o=function(){return s.removeEventListener(e,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var c=t;t.on(e,n),o=function(){return c.off(e,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var u=t;t.addListener(e,n),o=function(){return u.removeListener(e,n)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,l=t.length;a<l;a++)x(t[a],e,n,r,i)}r.add(o)}var T=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},n}(function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(l)),C=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),L=new(function(t){function n(e,r){void 0===r&&(r=C.now);var i=t.call(this,e,(function(){return n.delegate&&n.delegate!==i?n.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return e(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(C))(T);function k(t,e){return void 0===e&&(e=L),function(n){return n.lift(new N(t,e))}}var N=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new D(t,this.dueTime,this.scheduler))},t}(),D=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return e(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(A,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(p);function A(t){t.debouncedNext()}function I(t,e){return function(n){return n.lift(new j(t,e))}}var j=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new O(t,this.predicate,this.thisArg))},t}(),O=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},n}(p);function H(t){return t&&"function"==typeof t.schedule}var P=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function B(t,e){return new m((function(n){var r=new l,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function V(t,e){return e?B(t,e):new m(P(t))}function M(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return H(n)?(t.pop(),B(t,n)):V(t)}function U(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var z=U(),W=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function R(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var $=function(t){if(t&&"function"==typeof t[b])return r=t,function(t){var e=r[b]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(W(t))return P(t);if(R(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,o),t};if(t&&"function"==typeof t[z])return e=t,function(t){for(var n=e[z]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i=u(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")},F=function(t){function n(e){var n=t.call(this)||this;return n.parent=e,n}return e(n,t),n.prototype._next=function(t){this.parent.notifyNext(t)},n.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},n}(p),Y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(){this.destination.complete()},n}(p);function J(t,e){if(!e.closed)return t instanceof m?t.subscribe(e):$(t)(e)}var K=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Z(t,this.resultSelector))},t}(),Z=function(t){function n(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return e(n,t),n.prototype._next=function(t){var e=this.iterators;c(t)?e.push(new G(t)):"function"==typeof t[z]?e.push(new q(t[z]())):e.push(new X(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];r.stillUnsubscribed?this.destination.add(r.subscribe()):this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++)if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return;var i=!1,o=[];for(r=0;r<e;r++){var s,c=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),c.done)return void n.complete();o.push(c.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},n.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},n}(p),q=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),G=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[z]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),X=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return e(n,t),n.prototype[z]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},n.prototype.subscribe=function(){return J(this.observable,new F(this))},n}(Y);function Q(t,e){return e?function(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[b]}(t))return function(t,e){return new m((function(n){var r=new l;return r.add(e.schedule((function(){var i=t[b]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(R(t))return function(t,e){return new m((function(n){var r=new l;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(W(t))return B(t,e);if(function(t){return t&&"function"==typeof t[z]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new m((function(n){var r,i=new l;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[z](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}(t,e):t instanceof m?t:new m($(t))}function tt(t,e){return"function"==typeof e?function(n){return n.pipe(tt((function(n,r){return Q(t(n,r)).pipe(w((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new et(t))}}var et=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new nt(t,this.project))},t}(),nt=function(t){function n(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return e(n,t),n.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e)},n.prototype._innerSub=function(t){var e=this.innerSubscription;e&&e.unsubscribe();var n=new F(this),r=this.destination;r.add(n),this.innerSubscription=J(t,n),this.innerSubscription!==n&&r.add(this.innerSubscription)},n.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=void 0},n.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t){this.destination.next(t)},n}(Y);const rt="http://localhost:3000";var it,ot=0;class st{constructor(t,e){this._imageList=[],this.container=e,this._imageList=new Array,this.SetAndStartUser(t)}set user(t){this._user=t}get user(){return this._user}set container(t){this._container=t}get container(){return this._container}set imageList(t){this._imageList=t}get imageList(){return this._imageList}draw(){this.createCarNameBox()}SetAndStartUser(t){this.user=t,this.obs$=M(this.user)}zipInputs(){console.log("ZIPOVANJE OBSERVABLE OBJEKATA"),void 0!==this.obs$&&void 0!==this.obs2$&&(console.log("ZIP VALIDACIJA ISPRAVNA"),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),V(t,void 0).lift(new K(n))}(this.obs$,this.obs2$).subscribe((t=>{console.log(t),this.inputReservation(t)})))}inputReservation(t){let e=t[0],n=t[1];const r=document.body.getElementsByClassName("prikazRezervacija")[0];if(void 0===r)return;const i=this.createDiv(r);var o;this.WriteLabel("Korisnik:",i),this.WriteLabel(e.name,i),this.WriteLabel("Adresa:",i),this.WriteLabel(e.address,i),this.WriteLabel("Licna karta:",i),this.WriteLabel(e.idcard.toString(),i),this.WriteLabel("Vozac:",i),this.WriteLabel(n.name,i),this.WriteLabel("Automobil:",i),this.WriteLabel(n.car,i),this.WriteLabel("Prosecna ocena:",i),this.WriteLabel(n.avgMark.toString(),i);let s=Math.round(100*Math.random()%20+10),c=Math.round(100*Math.random()%s),u=0;var a,l,h;console.log("RangeLevel:"+s),console.log("randomNumber"+c),(a=10,l=s,void 0===a&&(a=0),new m((function(t){void 0===l&&(l=a,a=0);var e=0,n=a;for(h;;){if(e++>=l){t.complete();break}if(t.next(n++),t.closed)break}}))).pipe(w((t=>t*t))).subscribe((t=>{console.log("counter"+u),u++===c&&(console.log(t),o=t,console.log("Povratna vrd. je:"+o),this.WriteLabel("Cena:",i),this.WriteLabel((n.priceCoefficient*o).toString(),i))}))}createDiv(t){const e=document.createElement("div");return e.className="reservation",t.appendChild(e),e}WriteLabel(t,e){const n=document.createElement("label");n.innerHTML=t,n.style.margin="10px",e.appendChild(n)}createCarNameBox(){const t=document.createElement("div");t.className="TaxiLogic",this.container.appendChild(t);const e=document.createElement("label");e.innerHTML="Izaberite marku automobila koji zelite:",e.style.margin="10px",t.appendChild(e),this.createComboBox(t)}createComboBox(t){var e,n=document.createElement("select");n.className="selekcija",t.appendChild(n),Q(fetch(`${rt}/cars`).then((t=>{if(t.ok)return console.log(t),t.json();throw new Error("DB not found")})).catch((t=>console.log("Error"+t)))).subscribe((t=>{console.log(t),(e=document.createElement("option")).innerHTML="",e.classList.add("opcija"),e.value="",n.appendChild(e),t.forEach((t=>{(e=document.createElement("option")).innerHTML=t,e.classList.add("opcija"),e.value=t,n.appendChild(e)}))})),S(n,"click").pipe(w((t=>t.target.value)),I((t=>""!==t)),tt((t=>this.getDriversByCar(t)))).subscribe((e=>{this.drivers=e,this.WriteDrivers(),this.createImage(t)}))}createImage(t){var e=this.container.getElementsByClassName("image")[0];void 0!==e&&e.remove();const n=document.createElement("img");ot%=4,n.src="../"+this.imageList[ot],n.className="image",t.appendChild(n),S(n,"click").pipe().subscribe((()=>{n.src="../"+this.imageList[++ot%4]}))}getDriversByCar(t){return this.imageList=new Array,console.log(`fetching Car photos of ${t}`),fetch(`${rt}/photos/`+t).then((t=>{if(!t.ok)throw new Error("DB not found");t.json().then((t=>this.imageList=t))})).catch((t=>console.log("Error"+t))),Q(fetch(`${rt}/drivers/`+t).then((t=>{if(t.ok)return t.json();throw new Error("DB not found")})).catch((t=>console.log("Error"+t))))}WriteDrivers(){var t=this.container.getElementsByClassName("tabela")[0];void 0!==t&&t.remove();const e=document.createElement("table");e.className="tabela",this.container.appendChild(e),this.createTable(e),this.drivers.forEach((t=>{this.createTr(t,e)}))}createTable(t){this.createTh("Ime",t),this.createTh("Vozilo",t),this.createTh("Prosecna ocena",t),this.createTh("Koeficijent po minutu",t),this.createTh("Dugme za selekciju",t)}createTh(t,e){let n=document.createElement("th");n.innerHTML=t,n.style.margin="50%",e.appendChild(n)}createTr(t,e){const n=document.createElement("tr");e.appendChild(n),this.createTd(t.name,n),this.createTd(t.car.toString(),n),this.createTd(t.avgMark.toString(),n),this.createTd(t.priceCoefficient.toString(),n),this.createTdButton(t,"Selektuj ovog vozaca",n)}createTdButton(t,e,n){let r=document.createElement("td"),i=document.createElement("button");r.appendChild(i),i.innerHTML=e,r.style.margin="50%",i.className="dugmeUTabeli",n.appendChild(r),S(i,"click").subscribe((()=>{this.obs2$=M(t),console.log("OBS2 EMITTED, GOING INTO ZIPINPUTS"),this.zipInputs()}))}createTd(t,e){let n=document.createElement("td");n.innerHTML=t,n.style.margin="50%",e.appendChild(n)}createH2(t,e){const n=document.createElement("h2");n.innerHTML=t,e.appendChild(n)}}const ct=new class{constructor(t,e,n){this.name=t,this.address=e,this.idcard=n}set name(t){this._name=t}get name(){return this._name}set address(t){this._address=t}get address(){return this._address}set idcard(t){this._iDCard=t}get idcard(){return this._iDCard}checkInputs(){return console.log(this),void 0!==this.name&&void 0!==this.address&&0!==this.idcard}}(void 0,void 0,0);function ut(t,e){const n=document.createElement("h2");n.innerHTML=t,e.appendChild(n)}function at(t,e){const n=document.createElement("h3");void 0===t||0===parseInt(t)?n.innerHTML="Niste uneli ovaj podatak":n.innerHTML=t,e.appendChild(n)}function lt(t){var e=document.body.getElementsByClassName("DataViewDiv")[0];null!=e&&e.remove();const n=document.createElement("div");n.className="DataViewDiv",t.appendChild(n),ut("Vase ime:",n),at(ct.name,n),ut("Adresa na kojoj taksi dolazi po vas:",n),at(ct.address,n),ut("Broj licne karte:",n),at(ct.idcard.toString(),n)}function ht(){if(void 0===document.getElementsByClassName("TaxiLogicDiv")[0]){var t=document.getElementsByClassName("prikazRezervacija")[0];if(void 0!==t){const e=document.createElement("div");e.className="TaxiLogicDiv",document.body.insertBefore(e,t),(it=new st(ct,e)).draw()}}else it.SetAndStartUser(ct)}!function(){const t=document.createElement("div");t.className="DivHeader",document.body.appendChild(t),function(t,e){const n=document.createElement("h1");n.innerHTML="FICAX TAXI ONLINE",e.appendChild(n)}(0,t)}(),function(){const t=document.createElement("div");t.className="UserFormDiv",document.body.appendChild(t),function(t){const e=document.createElement("div");e.className="inputDiv",t.appendChild(e),ut("Unesite vase podatke:",e),function(t){const e=document.createElement("label");e.innerHTML="Unesite vase ime:",e.className="labela",t.appendChild(e);const n=document.createElement("input");n.type="text",n.className="inputName",t.appendChild(n),S(n,"input").pipe(k(500),w((t=>t.target.value)),I((t=>t.length>=3))).subscribe((t=>{ct.name=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&lt(e),ct.checkInputs()&&ht()}))}(e),function(t){const e=document.createElement("label");e.innerHTML="Unesite adresu na koju dolazi taksi:",e.className="labela",t.appendChild(e);const n=document.createElement("input");n.className="inputSurname",n.type="text",t.appendChild(n),S(n,"input").pipe(k(500),w((t=>t.target.value)),I((t=>t.length>=3))).subscribe((t=>{ct.address=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&lt(e),ct.checkInputs()&&ht()}))}(e),function(t){const e=document.createElement("label");e.innerHTML="Unesite broj licne karte:",e.className="labela",t.appendChild(e);const n=document.createElement("input");n.type="number",n.className="inputID",n.id="input",t.appendChild(n),S(n,"input").pipe(k(500),w((t=>t.target.value)),I((t=>9==t.length)),w((t=>parseInt(t)))).subscribe((t=>{ct.idcard=t;var e=document.body.getElementsByClassName("UserFormDiv")[0];void 0!==e&&lt(e),ct.checkInputs()&&ht()}))}(e)}(t),lt(t)}(),function(){let t=document.createElement("div");t.className="prikazRezervacija",document.body.appendChild(t),at("Rezervacije:",t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,