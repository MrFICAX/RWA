/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};function n(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t){return"function"==typeof t}var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}};function o(t){setTimeout((function(){throw t}),0)}var u={closed:!0,next:function(t){},error:function(t){if(i.useDeprecatedSynchronousErrorHandling)throw t;o(t)},complete:function(){}},s=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function c(t){return null!==t&&"object"==typeof t}var a=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),h=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var n;if(!this.closed){var r=this,i=r._parentOrParents,o=r._ctorUnsubscribe,u=r._unsubscribe,h=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof t)i.remove(this);else if(null!==i)for(var f=0;f<i.length;++f)i[f].remove(this);if(e(u)){o&&(this._unsubscribe=void 0);try{u.call(this)}catch(t){n=t instanceof a?l(t.errors):[t]}}if(s(h)){f=-1;for(var p=h.length;++f<p;){var d=h[f];if(c(d))try{d.unsubscribe()}catch(t){n=n||[],t instanceof a?n=n.concat(l(t.errors)):n.push(t)}}}if(n)throw new a(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function l(t){return t.reduce((function(t,n){return t.concat(n instanceof a?n.errors:n)}),[])}var f=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),p=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=u;break;case 1:if(!n){o.destination=u;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new d(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new d(o,n,r,i)}return o}return n(e,t),e.prototype[f]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(h),d=function(t){function r(n,r,i,o){var s,c=t.call(this)||this;c._parentSubscriber=n;var a=c;return e(r)?s=r:r&&(s=r.next,i=r.error,o=r.complete,r!==u&&(e((a=Object.create(r)).unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=s,c._error=i,c._complete=o,c}return n(r,t),r.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;i.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},r.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=i.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):o(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;o(t)}}},r.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};i.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},r.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),i.useDeprecatedSynchronousErrorHandling)throw t;o(t)}},r.prototype.__tryOrSetError=function(t,n,e){if(!i.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return i.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(o(n),!0)}return!1},r.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},r}(p),b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function y(t){return t}function v(t){return 0===t.length?y:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var m=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,o=function(t,n,e){if(t){if(t instanceof p)return t;if(t[f])return t[f]()}return t||n||e?new p(t,n,e):new p(u)}(t,n,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||i.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),i.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){i.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),function(t){for(;t;){var n=t,e=n.closed,r=n.destination,i=n.isStopped;if(e||i)return!1;t=r&&r instanceof p?r:null}return!0}(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=w(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[b]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:v(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=w(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function w(t){if(t||(t=i.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function _(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new g(t,n))}}var g=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new E(t,this.project,this.thisArg))},t}(),E=function(t){function e(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return n(e,t),e.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},e}(p);function S(t,n,r,i){return e(r)&&(i=r,r=void 0),i?S(t,n,r).pipe(_((function(t){return s(t)?i.apply(void 0,t):i(t)}))):new m((function(e){x(t,n,(function(t){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(t)}),e,r)}))}function x(t,n,e,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var u=t;t.addEventListener(n,e,i),o=function(){return u.removeEventListener(n,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var s=t;t.on(n,e),o=function(){return s.off(n,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(n,e),o=function(){return c.removeListener(n,e)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,h=t.length;a<h;a++)x(t[a],n,e,r,i)}r.add(o)}function T(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var O=T(),j=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function k(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var A=function(t){if(t&&"function"==typeof t[b])return i=t,function(t){var n=i[b]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(j(t))return r=t,function(t){for(var n=0,e=r.length;n<e&&!t.closed;n++)t.next(r[n]);t.complete()};if(k(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,o),t};if(t&&"function"==typeof t[O])return n=t,function(t){for(var e=n[O]();;){var r=void 0;try{r=e.next()}catch(n){return t.error(n),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,r,i,u=c(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+u+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function P(t,n){return n?function(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[b]}(t))return function(t,n){return new m((function(e){var r=new h;return r.add(n.schedule((function(){var i=t[b]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(k(t))return function(t,n){return new m((function(e){var r=new h;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(j(t))return function(t,n){return new m((function(e){var r=new h,i=0;return r.add(n.schedule((function(){i!==t.length?(e.next(t[i++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}(t,n);if(function(t){return t&&"function"==typeof t[O]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new m((function(e){var r,i=new h;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(n.schedule((function(){r=t[O](),i.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),i}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}(t,n):t instanceof m?t:new m(A(t))}var H=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},e}(function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(h)),D=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}(),C=new(function(t){function e(n,r){void 0===r&&(r=D.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return n(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(D))(H);function L(t,n){return void 0===n&&(n=C),function(e){return e.lift(new V(t,n))}}var V=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new I(t,this.dueTime,this.scheduler))},t}(),I=function(t){function e(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return n(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(M,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(p);function M(t){t.debouncedNext()}function U(t,n){return function(e){return e.lift(new N(t,n))}}var N=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new $(t,this.predicate,this.thisArg))},t}(),$=function(t){function e(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return n(e,t),e.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},e}(p),Y=function(t){function e(n){var e=t.call(this)||this;return e.parent=n,e}return n(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(p),R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(p);function q(t,n){return"function"==typeof n?function(e){return e.pipe(q((function(e,r){return P(t(e,r)).pipe(_((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new F(t))}}var F=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new z(t,this.project))},t}(),z=function(t){function e(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return n(e,t),e.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n)},e.prototype._innerSub=function(t){var n=this.innerSubscription;n&&n.unsubscribe();var e=new Y(this),r=this.destination;r.add(e),this.innerSubscription=function(t,n){if(!n.closed)return t instanceof m?t.subscribe(n):A(t)(n)}(t,e),this.innerSubscription!==e&&r.add(this.innerSubscription)},e.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=void 0},e.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t){this.destination.next(t)},e}(R);const B="http://localhost:3000";var K=0;function G(t){const n=document.createElement("h2");n.innerHTML=t,document.body.appendChild(n)}function J(t){0==K++?G("Tabela svih studenata"):G("Tabela selektovanih studenata br. "+(K-1));const n=document.createElement("table");n.style.border="1px solid black",document.body.appendChild(n),function(t){Q("name",t),Q("year",t),Q("avgMark",t)}(n),t.forEach((t=>{!function(t,n){const e=document.createElement("tr");n.appendChild(e),W(t.name,e),W(t.year.toString(),e),W(t.avgMark.toString(),e)}(t,n)}))}function Q(t,n){let e=document.createElement("th");e.innerHTML=t,e.style.margin="50%",n.appendChild(e)}function W(t,n){let e=document.createElement("td");e.innerHTML=t,e.style.margin="50%",n.appendChild(e)}!function(){const t=document.createElement("div");t.style.textAlign="center",document.body.style.textAlign="center",document.body.appendChild(t);const n=document.createElement("h2");n.innerHTML="Selekcija studenata",t.appendChild(n)}(),function(){const t=document.createElement("div");document.body.appendChild(t);const n=document.createElement("label");n.innerHTML="Unesite donju granicu proseka(pr. 8.0):",n.style.margin="10px",t.appendChild(n);const e=document.createElement("input");e.type="number",e.id="input",t.appendChild(e),S(e,"input").pipe(L(500),_((t=>t.target.value)),U((t=>t.length>=3)),q((t=>{return n=t,console.log(`fetching movie with a mark ${n}`),P(fetch(`${B}/students/`).then((t=>{if(t.ok)return console.log(t),t.json().then((t=>t.filter((t=>t.avgMark>=parseFloat(n)))));throw new Error("Response ain't ok")})).catch((t=>console.log("Error"+t))));var n}))).subscribe((t=>{console.log(t),J(t)}))}(),function(){const t=document.createElement("div");document.body.appendChild(t);const n=document.createElement("label");n.innerHTML="Unesite donju granicu godine rodjenja:",n.style.margin="10px",t.appendChild(n);const e=document.createElement("input");e.type="number",e.id="input",t.appendChild(e),S(e,"input").pipe(L(500),_((t=>t.target.value)),U((t=>t.length>=4)),q((t=>{return n=t,console.log(`fetching movie with a mark ${n}`),P(fetch(`${B}/students/`).then((t=>{if(t.ok)return console.log(t),t.json().then((t=>t.filter((t=>t.year>=parseFloat(n)))));throw new Error("DB not found")})).catch((t=>console.log("Error"+t))));var n}))).subscribe((t=>{console.log(t),J(t)}))}(),fetch(`${B}/students/1999`).then((t=>{if(t.ok)return t.json();throw new Error("RESPOSNE ISN'T OK")})).then((t=>{console.log(t)})).catch((t=>console.log("Error"+t)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,