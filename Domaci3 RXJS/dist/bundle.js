/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)t.hasOwnProperty(e)&&(r[e]=t[e])})(t,e)};function t(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(r){return"function"==typeof r}var n=!1,o={Promise:void 0,set useDeprecatedSynchronousErrorHandling(r){r&&(new Error).stack,n=r},get useDeprecatedSynchronousErrorHandling(){return n}};function s(r){setTimeout((function(){throw r}),0)}var i={closed:!0,next:function(r){},error:function(r){if(o.useDeprecatedSynchronousErrorHandling)throw r;s(r)},complete:function(){}},c=function(){return Array.isArray||function(r){return r&&"number"==typeof r.length}}(),u=function(){function r(r){return Error.call(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(r,t){return t+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r,this}return r.prototype=Object.create(Error.prototype),r}(),a=function(){function r(r){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,r&&(this._ctorUnsubscribe=!0,this._unsubscribe=r)}return r.prototype.unsubscribe=function(){var t;if(!this.closed){var n,o=this,s=o._parentOrParents,i=o._ctorUnsubscribe,a=o._unsubscribe,l=o._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,s instanceof r)s.remove(this);else if(null!==s)for(var p=0;p<s.length;++p)s[p].remove(this);if(e(a)){i&&(this._unsubscribe=void 0);try{a.call(this)}catch(r){t=r instanceof u?h(r.errors):[r]}}if(c(l)){p=-1;for(var b=l.length;++p<b;){var _=l[p];if(null!==(n=_)&&"object"==typeof n)try{_.unsubscribe()}catch(r){t=t||[],r instanceof u?t=t.concat(h(r.errors)):t.push(r)}}}if(t)throw new u(t)}},r.prototype.add=function(t){var e=t;if(!t)return r.EMPTY;switch(typeof t){case"function":e=new r(t);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof r)){var n=e;(e=new r)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=e._parentOrParents;if(null===o)e._parentOrParents=this;else if(o instanceof r){if(o===this)return e;e._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return e;o.push(this)}var s=this._subscriptions;return null===s?this._subscriptions=[e]:s.push(e),e},r.prototype.remove=function(r){var t=this._subscriptions;if(t){var e=t.indexOf(r);-1!==e&&t.splice(e,1)}},r.EMPTY=function(r){return r.closed=!0,r}(new r),r}();function h(r){return r.reduce((function(r,t){return r.concat(t instanceof u?t.errors:t)}),[])}var l=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),p=function(r){function e(t,n,o){var s=r.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=i;break;case 1:if(!t){s.destination=i;break}if("object"==typeof t){t instanceof e?(s.syncErrorThrowable=t.syncErrorThrowable,s.destination=t,t.add(s)):(s.syncErrorThrowable=!0,s.destination=new b(s,t));break}default:s.syncErrorThrowable=!0,s.destination=new b(s,t,n,o)}return s}return t(e,r),e.prototype[l]=function(){return this},e.create=function(r,t,n){var o=new e(r,t,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(r){this.isStopped||this._next(r)},e.prototype.error=function(r){this.isStopped||(this.isStopped=!0,this._error(r))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this))},e.prototype._next=function(r){this.destination.next(r)},e.prototype._error=function(r){this.destination.error(r),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var r=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=r,this},e}(a),b=function(r){function n(t,n,o,s){var c,u=r.call(this)||this;u._parentSubscriber=t;var a=u;return e(n)?c=n:n&&(c=n.next,o=n.error,s=n.complete,n!==i&&(e((a=Object.create(n)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=c,u._error=o,u._complete=s,u}return t(n,r),n.prototype.next=function(r){if(!this.isStopped&&this._next){var t=this._parentSubscriber;o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,r)&&this.unsubscribe():this.__tryOrUnsub(this._next,r)}},n.prototype.error=function(r){if(!this.isStopped){var t=this._parentSubscriber,e=o.useDeprecatedSynchronousErrorHandling;if(this._error)e&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,r),this.unsubscribe()):(this.__tryOrUnsub(this._error,r),this.unsubscribe());else if(t.syncErrorThrowable)e?(t.syncErrorValue=r,t.syncErrorThrown=!0):s(r),this.unsubscribe();else{if(this.unsubscribe(),e)throw r;s(r)}}},n.prototype.complete=function(){var r=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var e=function(){return r._complete.call(r._context)};o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(r,t){try{r.call(this._context,t)}catch(r){if(this.unsubscribe(),o.useDeprecatedSynchronousErrorHandling)throw r;s(r)}},n.prototype.__tryOrSetError=function(r,t,e){if(!o.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,e)}catch(t){return o.useDeprecatedSynchronousErrorHandling?(r.syncErrorValue=t,r.syncErrorThrown=!0,!0):(s(t),!0)}return!1},n.prototype._unsubscribe=function(){var r=this._parentSubscriber;this._context=null,this._parentSubscriber=null,r.unsubscribe()},n}(p),_=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function f(r){return r}function d(r){return 0===r.length?f:1===r.length?r[0]:function(t){return r.reduce((function(r,t){return t(r)}),t)}}var y=function(){function r(r){this._isScalar=!1,r&&(this._subscribe=r)}return r.prototype.lift=function(t){var e=new r;return e.source=this,e.operator=t,e},r.prototype.subscribe=function(r,t,e){var n=this.operator,s=function(r,t,e){if(r){if(r instanceof p)return r;if(r[l])return r[l]()}return r||t||e?new p(r,t,e):new p(i)}(r,t,e);if(n?s.add(n.call(s,this.source)):s.add(this.source||o.useDeprecatedSynchronousErrorHandling&&!s.syncErrorThrowable?this._subscribe(s):this._trySubscribe(s)),o.useDeprecatedSynchronousErrorHandling&&s.syncErrorThrowable&&(s.syncErrorThrowable=!1,s.syncErrorThrown))throw s.syncErrorValue;return s},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(t){o.useDeprecatedSynchronousErrorHandling&&(r.syncErrorThrown=!0,r.syncErrorValue=t),function(r){for(;r;){var t=r,e=t.closed,n=t.destination,o=t.isStopped;if(e||o)return!1;r=n&&n instanceof p?n:null}return!0}(r)?r.error(t):console.warn(t)}},r.prototype.forEach=function(r,t){var e=this;return new(t=m(t))((function(t,n){var o;o=e.subscribe((function(t){try{r(t)}catch(r){n(r),o&&o.unsubscribe()}}),n,t)}))},r.prototype._subscribe=function(r){var t=this.source;return t&&t.subscribe(r)},r.prototype[_]=function(){return this},r.prototype.pipe=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return 0===r.length?this:d(r)(this)},r.prototype.toPromise=function(r){var t=this;return new(r=m(r))((function(r,e){var n;t.subscribe((function(r){return n=r}),(function(r){return e(r)}),(function(){return r(n)}))}))},r.create=function(t){return new r(t)},r}();function m(r){if(r||(r=o.Promise||Promise),!r)throw new Error("no Promise impl found");return r}var v=function(){function r(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return r.prototype=Object.create(Error.prototype),r}(),E=function(r){function e(t,e){var n=r.call(this)||this;return n.subject=t,n.subscriber=e,n.closed=!1,n}return t(e,r),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var r=this.subject,t=r.observers;if(this.subject=null,t&&0!==t.length&&!r.isStopped&&!r.closed){var e=t.indexOf(this.subscriber);-1!==e&&t.splice(e,1)}}},e}(a),S=function(r){function e(t){var e=r.call(this,t)||this;return e.destination=t,e}return t(e,r),e}(p),w=function(r){function e(){var t=r.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(e,r),e.prototype[l]=function(){return new S(this)},e.prototype.lift=function(r){var t=new g(this,this);return t.operator=r,t},e.prototype.next=function(r){if(this.closed)throw new v;if(!this.isStopped)for(var t=this.observers,e=t.length,n=t.slice(),o=0;o<e;o++)n[o].next(r)},e.prototype.error=function(r){if(this.closed)throw new v;this.hasError=!0,this.thrownError=r,this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),o=0;o<e;o++)n[o].error(r);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new v;this.isStopped=!0;for(var r=this.observers,t=r.length,e=r.slice(),n=0;n<t;n++)e[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(t){if(this.closed)throw new v;return r.prototype._trySubscribe.call(this,t)},e.prototype._subscribe=function(r){if(this.closed)throw new v;return this.hasError?(r.error(this.thrownError),a.EMPTY):this.isStopped?(r.complete(),a.EMPTY):(this.observers.push(r),new E(this,r))},e.prototype.asObservable=function(){var r=new y;return r.source=this,r},e.create=function(r,t){return new g(r,t)},e}(y),g=function(r){function e(t,e){var n=r.call(this)||this;return n.destination=t,n.source=e,n}return t(e,r),e.prototype.next=function(r){var t=this.destination;t&&t.next&&t.next(r)},e.prototype.error=function(r){var t=this.destination;t&&t.error&&this.destination.error(r)},e.prototype.complete=function(){var r=this.destination;r&&r.complete&&this.destination.complete()},e.prototype._subscribe=function(r){return this.source?this.source.subscribe(r):a.EMPTY},e}(w);class T{constructor(r,t,e,n){this.setTemp(r),this.setVreme(t),this.setMesto(e),this.datum=n}setMesto(r){this.mesto=r}setTemp(r){this.temperatura=r}setVreme(r){this.vreme=r}set datum(r){this._datum=r}get datum(){return this._datum}getTemp(){return this.temperatura}getVreme(){return this.vreme}getMesto(){return this.mesto}}let j=["ladno","toplo","vruce","zima","prohladno"],O=["Nis","Aleksinac","Leksovac","Vranje","Beograd","Velimirovci","Podujevo"];const M=new w;!function(r){let t=document.createElement("label");t.innerHTML="Unesite broj iteracija",document.body.appendChild(t);let e=document.createElement("input");e.type="number",e.className="unos",document.body.appendChild(e),t=document.createElement("label"),t.innerHTML="Unesite do kog broja iteracija da se prikazuje",document.body.appendChild(t);let n=document.createElement("input");e.type="number",e.className="unos",document.body.appendChild(n);let o=document.createElement("button");o.innerHTML="Unesi broj iteracija",document.body.appendChild(o),o.onclick=()=>{let r=parseInt(n.value),t=parseInt(e.value);t>0?(function(r,t){let e=0;for(;e!==r&&e++!==t;)console.log(e),x.innerHTML+="NOVA VREMENSKA PROGNOZA!!! <br> Redni broj: "+e+"<br>",M.next(new T(100*Math.random()%50,j[e%j.length],O[e%O.length],new Date))}(t,r),alert("Proveri konzolu!")):alert("Niste uneli validne podakte")};let s=document.createElement("div");document.body.appendChild(s);let i=document.createElement("h1");s.appendChild(i),i.innerHTML="Podaci o Vremenskoj prognozi",t=document.createElement("label"),s.appendChild(t),t.className="tekst",t.innerHTML="____________________________________________________________<br>"}();let x=document.body.querySelector(".tekst");M.subscribe((r=>{console.log("SUBSCRIBER 1"),console.log("Subjektivni osecaj je: "+r.getVreme()+"<br>"),x.innerHTML+="SUBSCRIBER 1 <br>",x.innerHTML+="Subjektivni osecaj je: "+r.getVreme()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 2"),console.log("Trenutna temperatura je: "+r.getTemp()+"*C"),x.innerHTML+="SUBSCRIBER 2 <br>",x.innerHTML+="Trenutna temperatura je: "+r.getTemp()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 3"),console.log("Lokacija je: "+r.getMesto()),x.innerHTML+="SUBSCRIBER 3 <br>",x.innerHTML+="Lokacija je: "+r.getMesto()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 4"),console.log("Datum je: "+r.datum.toLocaleString()),x.innerHTML+="SUBSCRIBER 4 <br>",x.innerHTML+="Datum je: "+r.datum.toLocaleString()+"<br>",x.innerHTML+="____________________________________________________________ <br> <br>"}));const H=new y((r=>{r.next(Math.random())})),P=new w;P.subscribe((r=>{console.log(r)})),P.subscribe((r=>{console.log(r)})),H.subscribe(P)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL2RvbWFjaTEvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaG9zdFJlcG9ydEVycm9yLmpzIiwid2VicGFjazovL2RvbWFjaTEvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5LmpzIiwid2VicGFjazovL2RvbWFjaTEvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC90b1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvY2FuUmVwb3J0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3RTdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vZG9tYWNpMS8uL3NyYy9Qcm9nbm96YS50cyIsIndlYnBhY2s6Ly9kb21hY2kxLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsImlzRnVuY3Rpb24iLCJ4IiwiX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzIiwiY29uZmlnIiwiUHJvbWlzZSIsInVuZGVmaW5lZCIsInZhbHVlIiwiRXJyb3IiLCJzdGFjayIsImhvc3RSZXBvcnRFcnJvciIsImVyciIsInNldFRpbWVvdXQiLCJlbXB0eSIsImNsb3NlZCIsIm5leHQiLCJlcnJvciIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJjb21wbGV0ZSIsImlzQXJyYXkiLCJsZW5ndGgiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvckltcGwiLCJlcnJvcnMiLCJjYWxsIiwibWVzc2FnZSIsIm1hcCIsImkiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiU3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJfcGFyZW50T3JQYXJlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfY3RvclVuc3Vic2NyaWJlIiwiX3Vuc3Vic2NyaWJlIiwiX2EiLCJyZW1vdmUiLCJpbmRleCIsImUiLCJmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMiLCJsZW4iLCJzdWIiLCJjb25jYXQiLCJwdXNoIiwiYWRkIiwidGVhcmRvd24iLCJzdWJzY3JpcHRpb24iLCJFTVBUWSIsInRtcCIsImluZGV4T2YiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJzcGxpY2UiLCJyZWR1Y2UiLCJlcnJzIiwicnhTdWJzY3JpYmVyIiwiU3ltYm9sIiwiTWF0aCIsInJhbmRvbSIsIlN1YnNjcmliZXIiLCJfc3VwZXIiLCJkZXN0aW5hdGlvbk9yTmV4dCIsIl90aGlzIiwic3luY0Vycm9yVmFsdWUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JUaHJvd2FibGUiLCJpc1N0b3BwZWQiLCJhcmd1bWVudHMiLCJkZXN0aW5hdGlvbiIsIlNhZmVTdWJzY3JpYmVyIiwic3Vic2NyaWJlciIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSIsIl9wYXJlbnRTdWJzY3JpYmVyIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0IiwiYmluZCIsIl9jb250ZXh0IiwiX190cnlPclNldEVycm9yIiwiX190cnlPclVuc3ViIiwid3JhcHBlZENvbXBsZXRlIiwiZm4iLCJwYXJlbnQiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJwcmV2IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJzaW5rIiwibmV4dE9yT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJjbG9zZWRfMSIsImNhblJlcG9ydEVycm9yIiwiY29uc29sZSIsIndhcm4iLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib3BlcmF0aW9ucyIsIl9pIiwidG9Qcm9taXNlIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwiLCJTdWJqZWN0U3Vic2NyaXB0aW9uIiwic3ViamVjdCIsIm9ic2VydmVycyIsInN1YnNjcmliZXJJbmRleCIsIlN1YmplY3RTdWJzY3JpYmVyIiwiU3ViamVjdCIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJBbm9ueW1vdXNTdWJqZWN0IiwiY29weSIsInNsaWNlIiwiYXNPYnNlcnZhYmxlIiwiUHJvZ25vemEiLCJ0ZW1wIiwidnJlbWUiLCJtZXN0byIsImRhdHVtIiwic2V0VGVtcCIsInNldFZyZW1lIiwic2V0TWVzdG8iLCJ2cmVkbm9zdCIsInRlbXBlcmF0dXJhIiwiX2RhdHVtIiwiTml6VnJlbWVuYSIsIk5Jekxva2FjaWphIiwic3ViamVjdEEiLCJjbGlja0hhbmRsZXIiLCJsYWJlbGEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJudW1Cb3giLCJ0eXBlIiwiY2xhc3NOYW1lIiwibnVtR3JhbmljYUJveCIsImR1Z21lIiwib25jbGljayIsImdyYW5pY2EiLCJwYXJzZUludCIsInVuZXRvIiwibG9nIiwiU2F2VGVrc3QiLCJEYXRlIiwiYWxlcnQiLCJkaXZFbGVtZW50IiwibmFzbG92IiwiQ3J0YWpLb250cm9sZSIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhIiwiZ2V0VnJlbWUiLCJnZXRUZW1wIiwiZ2V0TWVzdG8iLCJ0b0xvY2FsZVN0cmluZyIsInN1YmplY3RCIl0sIm1hcHBpbmdzIjoiO21CQWdCQSxJQUFJQSxFQUFnQixTQUFTQyxFQUFHQyxHQUk1QixPQUhBRixFQUFnQkcsT0FBT0MsZ0JBQ2xCLENBQUVDLFVBQVcsY0FBZ0JDLE9BQVMsU0FBVUwsRUFBR0MsR0FBS0QsRUFBRUksVUFBWUgsSUFDdkUsU0FBVUQsRUFBR0MsR0FBSyxJQUFLLElBQUlLLEtBQUtMLEVBQU9BLEVBQUVNLGVBQWVELEtBQUlOLEVBQUVNLEdBQUtMLEVBQUVLLE1BQ3BETixFQUFHQyxJQUdyQixTQUFTTyxFQUFVUixFQUFHQyxHQUV6QixTQUFTUSxJQUFPQyxLQUFLQyxZQUFjWCxFQURuQ0QsRUFBY0MsRUFBR0MsR0FFakJELEVBQUVZLFVBQWtCLE9BQU5YLEVBQWFDLE9BQU9XLE9BQU9aLElBQU1RLEVBQUdHLFVBQVlYLEVBQUVXLFVBQVcsSUFBSUgsR0N6QjVFLFNBQVNLLEVBQVdDLEdBQ3ZCLE1BQW9CLG1CQUFOQSxFQ0RsQixJQUFJQyxHQUFzRCxFQUMvQ0MsRUFBUyxDQUNoQkMsYUFBU0MsRUFDVCwwQ0FBMENDLEdBQ2xDQSxJQUMwQixJQUFJQyxPQUNxR0MsTUFLdklOLEVBQXNESSxHQUUxRCw0Q0FDSSxPQUFPSixJQ2RSLFNBQVNPLEVBQWdCQyxHQUM1QkMsWUFBVyxXQUFjLE1BQU1ELElBQVEsR0NDcEMsSUFBSUUsRUFBUSxDQUNmQyxRQUFRLEVBQ1JDLEtBQU0sU0FBVVIsS0FDaEJTLE1BQU8sU0FBVUwsR0FDYixHQUFJUCxFQUFPYSxzQ0FDUCxNQUFNTixFQUdORCxFQUFn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UXVELElBQUlRLE1BRWhCLEVBQVc1RSxVQUFVaUYsSSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSBmYWxzZTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICBzZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IC8qQF9fUFVSRV9fKi8gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUud2FybignREVQUkVDQVRFRCEgUnhKUyB3YXMgc2V0IHRvIHVzZSBkZXByZWNhdGVkIHN5bmNocm9ub3VzIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yIGJ5IGNvZGUgYXQ6IFxcbicgKyBlcnJvci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzKSB7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUubG9nKCdSeEpTOiBCYWNrIHRvIGEgYmV0dGVyIGVycm9yIGJlaGF2aW9yLiBUaGFuayB5b3UuIDwzJyk7XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZygpIHtcbiAgICAgICAgcmV0dXJuIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncztcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9ob3N0UmVwb3J0RXJyb3InO1xuZXhwb3J0IHZhciBlbXB0eSA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF91dGlsX2lzQXJyYXksX3V0aWxfaXNPYmplY3QsX3V0aWxfaXNGdW5jdGlvbixfdXRpbF9VbnN1YnNjcmlwdGlvbkVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuL3V0aWwvaXNBcnJheSc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4vdXRpbC9pc09iamVjdCc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbnZhciBTdWJzY3JpcHRpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0b3JVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl91bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnRPclBhcmVudHMgPSBfYS5fcGFyZW50T3JQYXJlbnRzLCBfY3RvclVuc3Vic2NyaWJlID0gX2EuX2N0b3JVbnN1YnNjcmliZSwgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IF9wYXJlbnRPclBhcmVudHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudE9yUGFyZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKF91bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIGlmIChfY3RvclVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF91bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlLmVycm9ycykgOiBbZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXkoX3N1YnNjcmlwdGlvbnMpKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBfc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBzdWIgPSBfc3Vic2NyaXB0aW9uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHN1YikpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRlYXJkb3duO1xuICAgICAgICBpZiAoIXRlYXJkb3duKSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHRlYXJkb3duKSB7XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0ZWFyZG93bik7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24gPT09IHRoaXMgfHwgc3Vic2NyaXB0aW9uLmNsb3NlZCB8fCB0eXBlb2Ygc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghKHN1YnNjcmlwdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3N1YnNjcmlwdGlvbnMgPSBbdG1wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgdGVhcmRvd24gJyArIHRlYXJkb3duICsgJyBhZGRlZCB0byBTdWJzY3JpcHRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wYXJlbnRPclBhcmVudHMgPSBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fcGFyZW50T3JQYXJlbnRzID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoX3BhcmVudE9yUGFyZW50cyA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IFtfcGFyZW50T3JQYXJlbnRzLCB0aGlzXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfcGFyZW50T3JQYXJlbnRzLmluZGV4T2YodGhpcykgPT09IC0xKSB7XG4gICAgICAgICAgICBfcGFyZW50T3JQYXJlbnRzLnB1c2godGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbc3Vic2NyaXB0aW9uXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbkluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9uSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKGVtcHR5KSB7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KG5ldyBTdWJzY3JpcHRpb24oKSkpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5mdW5jdGlvbiBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKGVycnMsIGVycikgeyByZXR1cm4gZXJycy5jb25jYXQoKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpID8gZXJyLmVycm9ycyA6IGVycik7IH0sIFtdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gICAgcmV0dXJuIHggIT09IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgICAgICA6ICdAQHJ4U3Vic2NyaWJlcl8nICsgLypAX19QVVJFX18qLyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydCB2YXIgJCRyeFN1YnNjcmliZXIgPSByeFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yeFN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX2lzRnVuY3Rpb24sX09ic2VydmVyLF9TdWJzY3JpcHRpb24sX2ludGVybmFsX3N5bWJvbF9yeFN1YnNjcmliZXIsX2NvbmZpZyxfdXRpbF9ob3N0UmVwb3J0RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlbXB0eSBhcyBlbXB0eU9ic2VydmVyIH0gZnJvbSAnLi9PYnNlcnZlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlcic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbnZhciBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25Pck5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZGVzdGluYXRpb25Pck5leHQuc3luY0Vycm9yVGhyb3dhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uT3JOZXh0LmFkZChfdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gdGhpcy5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IF9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIFNhZmVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKF9wYXJlbnRTdWJzY3JpYmVyLCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0Lm5leHQ7XG4gICAgICAgICAgICBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yO1xuICAgICAgICAgICAgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAhPT0gZW1wdHlPYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0LnVuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC51bnN1YnNjcmliZS5iaW5kKGNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9IF90aGlzLnVuc3Vic2NyaWJlLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgX3RoaXMuX25leHQgPSBuZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiB0aGlzLl9uZXh0KSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX25leHQsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgdmFyIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgPSBjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZztcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICghdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmICh1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcGxldGUuY2FsbChfdGhpcy5fY29udGV4dCk7IH07XG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclVuc3ViID0gZnVuY3Rpb24gKGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yU2V0RXJyb3IgPSBmdW5jdGlvbiAocGFyZW50LCBmbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgY2FsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF90b1N1YnNjcmliZXIsX3N5bWJvbF9vYnNlcnZhYmxlLF91dGlsX3BpcGUsX2NvbmZpZyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjYW5SZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyB0b1N1YnNjcmliZXIgfSBmcm9tICcuL3V0aWwvdG9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG52YXIgT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKHRoaXMuc291cmNlIHx8IChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiAhc2luay5zeW5jRXJyb3JUaHJvd2FibGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc2luaykgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzaW5rLnN5bmNFcnJvclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzaW5rKSkge1xuICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gdmFsdWUgPSB4OyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIsX3N5bWJvbF9yeFN1YnNjcmliZXIsX09ic2VydmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbmltcG9ydCB7IGVtcHR5IGFzIGVtcHR5T2JzZXJ2ZXIgfSBmcm9tICcuLi9PYnNlcnZlcic7XG5leHBvcnQgZnVuY3Rpb24gdG9TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICBpZiAobmV4dE9yT2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIoZW1wdHlPYnNlcnZlcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuUmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0O1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gc3ViamVjdC5vYnNlcnZlcnM7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IG51bGw7XG4gICAgICAgIGlmICghb2JzZXJ2ZXJzIHx8IG9ic2VydmVycy5sZW5ndGggPT09IDAgfHwgc3ViamVjdC5pc1N0b3BwZWQgfHwgc3ViamVjdC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaWJlckluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YodGhpcy5zdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2Uoc3Vic2NyaWJlckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3ViamVjdFN1YnNjcmlwdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX09ic2VydmFibGUsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvcixfU3ViamVjdFN1YnNjcmlwdGlvbixfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YmplY3RTdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xudmFyIFN1YmplY3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU3ViamVjdFN1YnNjcmliZXIgfTtcbnZhciBTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvcHlbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhpcy50aHJvd25FcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwXG4iLCJleHBvcnQgY2xhc3MgUHJvZ25vemEge1xyXG4gICAgY29uc3RydWN0b3IodGVtcCwgdnJlbWUsIG1lc3RvLCBkYXR1bSkge1xyXG4gICAgICAgIHRoaXMuc2V0VGVtcCh0ZW1wKTtcclxuICAgICAgICB0aGlzLnNldFZyZW1lKHZyZW1lKTtcclxuICAgICAgICB0aGlzLnNldE1lc3RvKG1lc3RvKTtcclxuICAgICAgICB0aGlzLmRhdHVtID0gZGF0dW07XHJcbiAgICB9XHJcbiAgICBzZXRNZXN0byhtZXN0bykge1xyXG4gICAgICAgIHRoaXMubWVzdG8gPSBtZXN0bztcclxuICAgIH1cclxuICAgIHNldFRlbXAodnJlZG5vc3QpIHtcclxuICAgICAgICB0aGlzLnRlbXBlcmF0dXJhID0gdnJlZG5vc3Q7XHJcbiAgICB9XHJcbiAgICBzZXRWcmVtZSh2cmVkbm9zdCkge1xyXG4gICAgICAgIHRoaXMudnJlbWUgPSB2cmVkbm9zdDtcclxuICAgIH1cclxuICAgIHNldCBkYXR1bSh2cmVkbm9zdCkge1xyXG4gICAgICAgIHRoaXMuX2RhdHVtID0gdnJlZG5vc3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgZGF0dW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdHVtO1xyXG4gICAgfVxyXG4gICAgZ2V0VGVtcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZW1wZXJhdHVyYTtcclxuICAgIH1cclxuICAgIGdldFZyZW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZyZW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0TWVzdG8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzdG87XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XHJcbi8vaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHRha2UsIHRha2VVbnRpbCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBQcm9nbm96YSB9IGZyb20gXCIuL1Byb2dub3phXCI7XHJcbmxldCBOaXpWcmVtZW5hID0gW1wibGFkbm9cIiwgXCJ0b3Bsb1wiLCBcInZydWNlXCIsIFwiemltYVwiLCBcInByb2hsYWRub1wiXTtcclxubGV0IE5Jekxva2FjaWphID0gW1xyXG4gICAgXCJOaXNcIixcclxuICAgIFwiQWxla3NpbmFjXCIsXHJcbiAgICBcIkxla3NvdmFjXCIsXHJcbiAgICBcIlZyYW5qZVwiLFxyXG4gICAgXCJCZW9ncmFkXCIsXHJcbiAgICBcIlZlbGltaXJvdmNpXCIsXHJcbiAgICBcIlBvZHVqZXZvXCIsXHJcbl07XHJcbmNvbnN0IHN1YmplY3RBID0gbmV3IFN1YmplY3QoKTtcclxuQ3J0YWpLb250cm9sZShQb2tyZW5pVW5vcyk7XHJcbmxldCBTYXZUZWtzdCA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcihcIi50ZWtzdFwiKTtcclxuLy8gc3Vic2NyaWJlciAxXHJcbnN1YmplY3RBLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJTVUJTQ1JJQkVSIDFcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIlN1Ympla3Rpdm5pIG9zZWNhaiBqZTogXCIgKyBkYXRhLmdldFZyZW1lKCkgKyBcIjxicj5cIik7XHJcbiAgICBTYXZUZWtzdC5pbm5lckhUTUwgKz0gXCJTVUJTQ1JJQkVSIDEgPGJyPlwiO1xyXG4gICAgU2F2VGVrc3QuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgXCJTdWJqZWt0aXZuaSBvc2VjYWogamU6IFwiICsgZGF0YS5nZXRWcmVtZSgpICsgXCI8YnI+IDxicj5cIjtcclxufSk7XHJcbi8vIHN1YnNjcmliZXIgMlxyXG5zdWJqZWN0QS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiU1VCU0NSSUJFUiAyXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJUcmVudXRuYSB0ZW1wZXJhdHVyYSBqZTogXCIgKyBkYXRhLmdldFRlbXAoKSArIFwiKkNcIik7XHJcbiAgICBTYXZUZWtzdC5pbm5lckhUTUwgKz0gXCJTVUJTQ1JJQkVSIDIgPGJyPlwiO1xyXG4gICAgU2F2VGVrc3QuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgXCJUcmVudXRuYSB0ZW1wZXJhdHVyYSBqZTogXCIgKyBkYXRhLmdldFRlbXAoKSArIFwiPGJyPiA8YnI+XCI7XHJcbn0pO1xyXG4vLyBzdWJzY3JpYmVyIDNcclxuc3ViamVjdEEuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlNVQlNDUklCRVIgM1wiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9rYWNpamEgamU6IFwiICsgZGF0YS5nZXRNZXN0bygpKTtcclxuICAgIFNhdlRla3N0LmlubmVySFRNTCArPSBcIlNVQlNDUklCRVIgMyA8YnI+XCI7XHJcbiAgICBTYXZUZWtzdC5pbm5lckhUTUwgKz0gXCJMb2thY2lqYSBqZTogXCIgKyBkYXRhLmdldE1lc3RvKCkgKyBcIjxicj4gPGJyPlwiO1xyXG59KTtcclxuLy8gc3Vic2NyaWJlciA0XHJcbnN1YmplY3RBLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJTVUJTQ1JJQkVSIDRcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIkRhdHVtIGplOiBcIiArIGRhdGEuZGF0dW0udG9Mb2NhbGVTdHJpbmcoKSk7XHJcbiAgICBTYXZUZWtzdC5pbm5lckhUTUwgKz0gXCJTVUJTQ1JJQkVSIDQgPGJyPlwiO1xyXG4gICAgU2F2VGVrc3QuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgXCJEYXR1bSBqZTogXCIgKyBkYXRhLmRhdHVtLnRvTG9jYWxlU3RyaW5nKCkgKyBcIjxicj5cIjtcclxuICAgIFNhdlRla3N0LmlubmVySFRNTCArPVxyXG4gICAgICAgIFwiX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIDxicj4gPGJyPlwiO1xyXG59KTtcclxuZnVuY3Rpb24gUG9rcmVuaVVub3ModW5ldG8sIGdyYW5pY2EpIHtcclxuICAgIGxldCB4ID0gMDtcclxuICAgIHdoaWxlICh4ICE9PSB1bmV0bykge1xyXG4gICAgICAgIGlmICh4KysgPT09IGdyYW5pY2EpIHtcclxuICAgICAgICAgICAgLy9zdWJqZWN0QS5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coeCk7XHJcbiAgICAgICAgU2F2VGVrc3QuaW5uZXJIVE1MICs9XHJcbiAgICAgICAgICAgIFwiTk9WQSBWUkVNRU5TS0EgUFJPR05PWkEhISEgPGJyPiBSZWRuaSBicm9qOiBcIiArIHggKyBcIjxicj5cIjtcclxuICAgICAgICBzdWJqZWN0QS5uZXh0KG5ldyBQcm9nbm96YSgoTWF0aC5yYW5kb20oKSAqIDEwMCkgJSA1MCwgTml6VnJlbWVuYVt4ICUgTml6VnJlbWVuYS5sZW5ndGhdLCBOSXpMb2thY2lqYVt4ICUgTkl6TG9rYWNpamEubGVuZ3RoXSwgbmV3IERhdGUoKSkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIENydGFqS29udHJvbGUoY2xpY2tIYW5kbGVyKSB7XHJcbiAgICBsZXQgbGFiZWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxhLmlubmVySFRNTCA9IFwiVW5lc2l0ZSBicm9qIGl0ZXJhY2lqYVwiO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsYWJlbGEpO1xyXG4gICAgbGV0IG51bUJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIG51bUJveC50eXBlID0gXCJudW1iZXJcIjtcclxuICAgIG51bUJveC5jbGFzc05hbWUgPSBcInVub3NcIjtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobnVtQm94KTtcclxuICAgIGxhYmVsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsYS5pbm5lckhUTUwgPSBcIlVuZXNpdGUgZG8ga29nIGJyb2phIGl0ZXJhY2lqYSBkYSBzZSBwcmlrYXp1amVcIjtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGFiZWxhKTtcclxuICAgIGxldCBudW1HcmFuaWNhQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbnVtQm94LnR5cGUgPSBcIm51bWJlclwiO1xyXG4gICAgbnVtQm94LmNsYXNzTmFtZSA9IFwidW5vc1wiO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChudW1HcmFuaWNhQm94KTtcclxuICAgIGxldCBkdWdtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBkdWdtZS5pbm5lckhUTUwgPSBcIlVuZXNpIGJyb2ogaXRlcmFjaWphXCI7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1Z21lKTtcclxuICAgIGR1Z21lLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGdyYW5pY2EgPSBwYXJzZUludChudW1HcmFuaWNhQm94LnZhbHVlKTtcclxuICAgICAgICBsZXQgdW5ldG8gPSBwYXJzZUludChudW1Cb3gudmFsdWUpO1xyXG4gICAgICAgIGlmICh1bmV0byA+IDApIHtcclxuICAgICAgICAgICAgY2xpY2tIYW5kbGVyKHVuZXRvLCBncmFuaWNhKTtcclxuICAgICAgICAgICAgLy9Qb2tyZW5pVW5vcyh1bmV0bywgZ3JhbmljYSk7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiUHJvdmVyaSBrb256b2x1IVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBhbGVydChcIk5pc3RlIHVuZWxpIHZhbGlkbmUgcG9kYWt0ZVwiKTtcclxuICAgIH07XHJcbiAgICBsZXQgZGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdkVsZW1lbnQpO1xyXG4gICAgbGV0IG5hc2xvdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcclxuICAgIGRpdkVsZW1lbnQuYXBwZW5kQ2hpbGQobmFzbG92KTtcclxuICAgIG5hc2xvdi5pbm5lckhUTUwgPSBcIlBvZGFjaSBvIFZyZW1lbnNrb2ogcHJvZ25vemlcIjtcclxuICAgIGxhYmVsYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGRpdkVsZW1lbnQuYXBwZW5kQ2hpbGQobGFiZWxhKTtcclxuICAgIGxhYmVsYS5jbGFzc05hbWUgPSBcInRla3N0XCI7XHJcbiAgICBsYWJlbGEuaW5uZXJIVE1MID1cclxuICAgICAgICBcIl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXzxicj5cIjtcclxufVxyXG5jb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XHJcbiAgICBvYnNlcnZlci5uZXh0KE1hdGgucmFuZG9tKCkpO1xyXG59KTtcclxuY29uc3Qgc3ViamVjdEIgPSBuZXcgU3ViamVjdCgpO1xyXG4vLyBzdWJzY3JpYmVyIDFcclxuc3ViamVjdEIuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhKTsgLy8gMC4yNDk1NzE0NDIxNTA5NzUxNSAocmFuZG9tIG51bWJlcilcclxufSk7XHJcbi8vIHN1YnNjcmliZXIgMlxyXG5zdWJqZWN0Qi5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpOyAvLyAwLjI0OTU3MTQ0MjE1MDk3NTE1IChyYW5kb20gbnVtYmVyKVxyXG59KTtcclxub2JzZXJ2YWJsZS5zdWJzY3JpYmUoc3ViamVjdEIpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9