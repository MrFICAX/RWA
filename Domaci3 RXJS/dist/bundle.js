/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)t.hasOwnProperty(e)&&(r[e]=t[e])})(t,e)};function t(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(r){return"function"==typeof r}var n=!1,o={Promise:void 0,set useDeprecatedSynchronousErrorHandling(r){r&&(new Error).stack,n=r},get useDeprecatedSynchronousErrorHandling(){return n}};function s(r){setTimeout((function(){throw r}),0)}var i={closed:!0,next:function(r){},error:function(r){if(o.useDeprecatedSynchronousErrorHandling)throw r;s(r)},complete:function(){}},c=function(){return Array.isArray||function(r){return r&&"number"==typeof r.length}}(),u=function(){function r(r){return Error.call(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(r,t){return t+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r,this}return r.prototype=Object.create(Error.prototype),r}(),a=function(){function r(r){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,r&&(this._ctorUnsubscribe=!0,this._unsubscribe=r)}return r.prototype.unsubscribe=function(){var t;if(!this.closed){var n,o=this,s=o._parentOrParents,i=o._ctorUnsubscribe,a=o._unsubscribe,p=o._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,s instanceof r)s.remove(this);else if(null!==s)for(var l=0;l<s.length;++l)s[l].remove(this);if(e(a)){i&&(this._unsubscribe=void 0);try{a.call(this)}catch(r){t=r instanceof u?h(r.errors):[r]}}if(c(p)){l=-1;for(var b=p.length;++l<b;){var _=p[l];if(null!==(n=_)&&"object"==typeof n)try{_.unsubscribe()}catch(r){t=t||[],r instanceof u?t=t.concat(h(r.errors)):t.push(r)}}}if(t)throw new u(t)}},r.prototype.add=function(t){var e=t;if(!t)return r.EMPTY;switch(typeof t){case"function":e=new r(t);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof r)){var n=e;(e=new r)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=e._parentOrParents;if(null===o)e._parentOrParents=this;else if(o instanceof r){if(o===this)return e;e._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return e;o.push(this)}var s=this._subscriptions;return null===s?this._subscriptions=[e]:s.push(e),e},r.prototype.remove=function(r){var t=this._subscriptions;if(t){var e=t.indexOf(r);-1!==e&&t.splice(e,1)}},r.EMPTY=function(r){return r.closed=!0,r}(new r),r}();function h(r){return r.reduce((function(r,t){return r.concat(t instanceof u?t.errors:t)}),[])}var p=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),l=function(r){function e(t,n,o){var s=r.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=i;break;case 1:if(!t){s.destination=i;break}if("object"==typeof t){t instanceof e?(s.syncErrorThrowable=t.syncErrorThrowable,s.destination=t,t.add(s)):(s.syncErrorThrowable=!0,s.destination=new b(s,t));break}default:s.syncErrorThrowable=!0,s.destination=new b(s,t,n,o)}return s}return t(e,r),e.prototype[p]=function(){return this},e.create=function(r,t,n){var o=new e(r,t,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(r){this.isStopped||this._next(r)},e.prototype.error=function(r){this.isStopped||(this.isStopped=!0,this._error(r))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this))},e.prototype._next=function(r){this.destination.next(r)},e.prototype._error=function(r){this.destination.error(r),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var r=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=r,this},e}(a),b=function(r){function n(t,n,o,s){var c,u=r.call(this)||this;u._parentSubscriber=t;var a=u;return e(n)?c=n:n&&(c=n.next,o=n.error,s=n.complete,n!==i&&(e((a=Object.create(n)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=c,u._error=o,u._complete=s,u}return t(n,r),n.prototype.next=function(r){if(!this.isStopped&&this._next){var t=this._parentSubscriber;o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,r)&&this.unsubscribe():this.__tryOrUnsub(this._next,r)}},n.prototype.error=function(r){if(!this.isStopped){var t=this._parentSubscriber,e=o.useDeprecatedSynchronousErrorHandling;if(this._error)e&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,r),this.unsubscribe()):(this.__tryOrUnsub(this._error,r),this.unsubscribe());else if(t.syncErrorThrowable)e?(t.syncErrorValue=r,t.syncErrorThrown=!0):s(r),this.unsubscribe();else{if(this.unsubscribe(),e)throw r;s(r)}}},n.prototype.complete=function(){var r=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var e=function(){return r._complete.call(r._context)};o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(r,t){try{r.call(this._context,t)}catch(r){if(this.unsubscribe(),o.useDeprecatedSynchronousErrorHandling)throw r;s(r)}},n.prototype.__tryOrSetError=function(r,t,e){if(!o.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,e)}catch(t){return o.useDeprecatedSynchronousErrorHandling?(r.syncErrorValue=t,r.syncErrorThrown=!0,!0):(s(t),!0)}return!1},n.prototype._unsubscribe=function(){var r=this._parentSubscriber;this._context=null,this._parentSubscriber=null,r.unsubscribe()},n}(l),_=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function f(r){return r}function d(r){return 0===r.length?f:1===r.length?r[0]:function(t){return r.reduce((function(r,t){return t(r)}),t)}}var y=function(){function r(r){this._isScalar=!1,r&&(this._subscribe=r)}return r.prototype.lift=function(t){var e=new r;return e.source=this,e.operator=t,e},r.prototype.subscribe=function(r,t,e){var n=this.operator,s=function(r,t,e){if(r){if(r instanceof l)return r;if(r[p])return r[p]()}return r||t||e?new l(r,t,e):new l(i)}(r,t,e);if(n?s.add(n.call(s,this.source)):s.add(this.source||o.useDeprecatedSynchronousErrorHandling&&!s.syncErrorThrowable?this._subscribe(s):this._trySubscribe(s)),o.useDeprecatedSynchronousErrorHandling&&s.syncErrorThrowable&&(s.syncErrorThrowable=!1,s.syncErrorThrown))throw s.syncErrorValue;return s},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(t){o.useDeprecatedSynchronousErrorHandling&&(r.syncErrorThrown=!0,r.syncErrorValue=t),function(r){for(;r;){var t=r,e=t.closed,n=t.destination,o=t.isStopped;if(e||o)return!1;r=n&&n instanceof l?n:null}return!0}(r)?r.error(t):console.warn(t)}},r.prototype.forEach=function(r,t){var e=this;return new(t=m(t))((function(t,n){var o;o=e.subscribe((function(t){try{r(t)}catch(r){n(r),o&&o.unsubscribe()}}),n,t)}))},r.prototype._subscribe=function(r){var t=this.source;return t&&t.subscribe(r)},r.prototype[_]=function(){return this},r.prototype.pipe=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return 0===r.length?this:d(r)(this)},r.prototype.toPromise=function(r){var t=this;return new(r=m(r))((function(r,e){var n;t.subscribe((function(r){return n=r}),(function(r){return e(r)}),(function(){return r(n)}))}))},r.create=function(t){return new r(t)},r}();function m(r){if(r||(r=o.Promise||Promise),!r)throw new Error("no Promise impl found");return r}var v=function(){function r(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return r.prototype=Object.create(Error.prototype),r}(),E=function(r){function e(t,e){var n=r.call(this)||this;return n.subject=t,n.subscriber=e,n.closed=!1,n}return t(e,r),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var r=this.subject,t=r.observers;if(this.subject=null,t&&0!==t.length&&!r.isStopped&&!r.closed){var e=t.indexOf(this.subscriber);-1!==e&&t.splice(e,1)}}},e}(a),S=function(r){function e(t){var e=r.call(this,t)||this;return e.destination=t,e}return t(e,r),e}(l),w=function(r){function e(){var t=r.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(e,r),e.prototype[p]=function(){return new S(this)},e.prototype.lift=function(r){var t=new g(this,this);return t.operator=r,t},e.prototype.next=function(r){if(this.closed)throw new v;if(!this.isStopped)for(var t=this.observers,e=t.length,n=t.slice(),o=0;o<e;o++)n[o].next(r)},e.prototype.error=function(r){if(this.closed)throw new v;this.hasError=!0,this.thrownError=r,this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),o=0;o<e;o++)n[o].error(r);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new v;this.isStopped=!0;for(var r=this.observers,t=r.length,e=r.slice(),n=0;n<t;n++)e[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(t){if(this.closed)throw new v;return r.prototype._trySubscribe.call(this,t)},e.prototype._subscribe=function(r){if(this.closed)throw new v;return this.hasError?(r.error(this.thrownError),a.EMPTY):this.isStopped?(r.complete(),a.EMPTY):(this.observers.push(r),new E(this,r))},e.prototype.asObservable=function(){var r=new y;return r.source=this,r},e.create=function(r,t){return new g(r,t)},e}(y),g=function(r){function e(t,e){var n=r.call(this)||this;return n.destination=t,n.source=e,n}return t(e,r),e.prototype.next=function(r){var t=this.destination;t&&t.next&&t.next(r)},e.prototype.error=function(r){var t=this.destination;t&&t.error&&this.destination.error(r)},e.prototype.complete=function(){var r=this.destination;r&&r.complete&&this.destination.complete()},e.prototype._subscribe=function(r){return this.source?this.source.subscribe(r):a.EMPTY},e}(w);class T{constructor(r,t,e,n){this.setTemp(r),this.setVreme(t),this.setMesto(e),this.setDatum(n)}setMesto(r){this.mesto=r}setTemp(r){this.temperatura=r}setVreme(r){this.vreme=r}setDatum(r){this.datum=r}getDatum(){return this.datum}getTemp(){return this.temperatura}getVreme(){return this.vreme}getMesto(){return this.mesto}}let j=["ladno","toplo","vruce","zima","prohladno"],O=["Nis","Aleksinac","Leksovac","Vranje","Beograd","Velimirovci","Podujevo"];const M=new w;!function(){let r=document.createElement("label");r.innerHTML="Unesite broj iteracija",document.body.appendChild(r);let t=document.createElement("input");t.type="number",t.className="unos",document.body.appendChild(t),r=document.createElement("label"),r.innerHTML="Unesite do kog broja iteracija da se prikazuje",document.body.appendChild(r);let e=document.createElement("input");t.type="number",t.className="unos",document.body.appendChild(e);let n=document.createElement("button");n.innerHTML="Unesi broj iteracija",document.body.appendChild(n),n.onclick=()=>{let r=parseInt(e.value),n=parseInt(t.value);n>0?(function(r,t){let e=0;for(;e!==r&&e++!==t;)console.log(e),x.innerHTML+="NOVA VREMENSKA PROGNOZA!!! <br> Redni broj: "+e+"<br>",M.next(new T(100*Math.random()%50,j[e%j.length],O[e%O.length],new Date))}(n,r),alert("Proveri konzolu!")):alert("Niste uneli validne podakte")};let o=document.createElement("div");document.body.appendChild(o);let s=document.createElement("h1");o.appendChild(s),s.innerHTML="Podaci o Vremenskoj prognozi",r=document.createElement("label"),o.appendChild(r),r.className="tekst",r.innerHTML="____________________________________________________________<br>"}();let x=document.body.querySelector(".tekst");M.subscribe((r=>{console.log("SUBSCRIBER 1"),console.log("Subjektivni osecaj je: "+r.getVreme()+"<br>"),x.innerHTML+="SUBSCRIBER 1 <br>",x.innerHTML+="Subjektivni osecaj je: "+r.getVreme()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 2"),console.log("Trenutna temperatura je: "+r.getTemp()+"*C"),x.innerHTML+="SUBSCRIBER 2 <br>",x.innerHTML+="Trenutna temperatura je: "+r.getTemp()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 3"),console.log("Lokacija je: "+r.getMesto()),x.innerHTML+="SUBSCRIBER 3 <br>",x.innerHTML+="Lokacija je: "+r.getMesto()+"<br> <br>"})),M.subscribe((r=>{console.log("SUBSCRIBER 4"),console.log("Datum je: "+r.getDatum().toLocaleString()),x.innerHTML+="SUBSCRIBER 4 <br>",x.innerHTML+="Datum je: "+r.getDatum().toLocaleString()+"<br>",x.innerHTML+="____________________________________________________________ <br> <br>"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,